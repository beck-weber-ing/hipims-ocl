/*
 * ------------------------------------------
 *
 *  HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 *  Luke S. Smith and Qiuhua Liang
 *  luke@smith.ac
 *
 *  School of Civil Engineering & Geosciences
 *  Newcastle University
 *
 * ------------------------------------------
 *  This code is licensed under GPLv3. See LICENCE
 *  for more information.
 * ------------------------------------------
 *  IMPLICIT FRICTION
 * ------------------------------------------
 *  Reduce discharge values according to
 *  friction coefficients.
 * ------------------------------------------
 *
 */

/*
 *	Point-implicit calculation of the friction effects
 */
cl_double4  __attribute__((always_inline)) implicitFriction(
	cl_double4		pCellState,
	cl_double		dBedElevation,
	cl_double		dDepth,
	cl_double		dManningCoefficient,
	cl_double		dLclTimestep
	)
{
	// Calculate depth and composite discharge
	__private cl_double		dQ = sqrt(pCellState.z * pCellState.z + pCellState.w * pCellState.w);
	__private cl_double		dQi = 1.0 / dQ;

	// Low discharge: don't bother
	if (dQ < VERY_SMALL) return pCellState;

	__private cl_double		sDepthR = 1.0 / (dDepth * dDepth);

	// Coefficient of friction, etc. See Liang (2010)
	__private cl_double		dCf = (GRAVITY * dManningCoefficient * dManningCoefficient) / (pow((cl_double)dDepth, (cl_double)(1.0 / 3.0)));
	__private cl_double		dSfx = (-dCf * sDepthR) * pCellState.z * dQ;
	__private cl_double		dSfy = (-dCf * sDepthR) * pCellState.w * dQ;
	__private cl_double		dDx = 1.0 + dLclTimestep * (dCf * sDepthR) * (2 * (pCellState.z * pCellState.z) + (pCellState.w * pCellState.w)) * dQi;
	__private cl_double		dDy = 1.0 + dLclTimestep * (dCf * sDepthR) * ((pCellState.z * pCellState.z) + 2 * (pCellState.w * pCellState.w)) * dQi;
	__private cl_double		dFx = dSfx / dDx;
	__private cl_double		dFy = dSfy / dDy;

	__private cl_double		dLclTimestepR = 1.0 / dLclTimestep;

	// Friction can only stop flow, not reverse it
	if (pCellState.z >= 0.0)
	{
		//if (dFx < -pCellState.z * dLclTimestepR) dFx = -pCellState.z * dLclTimestepR;
		dFx = fmax(dFx,-pCellState.z * dLclTimestepR);
	} else {
		//if (dFx > -pCellState.z * dLclTimestepR) dFx = -pCellState.z * dLclTimestepR;
		dFx = fmin(dFx,-pCellState.z * dLclTimestepR);
	}
	if (pCellState.w >= 0.0)
	{
		//if (dFy < -pCellState.w * dLclTimestepR) dFy = -pCellState.w * dLclTimestepR;
		dFy = fmax(dFy,-pCellState.w * dLclTimestepR);
	} else {
		//if (dFy > -pCellState.w * dLclTimestepR) dFy = -pCellState.w * dLclTimestepR;
		dFy = fmin(dFy,-pCellState.w * dLclTimestepR);
	}

	// Update and commit data
	pCellState.z = pCellState.z + dLclTimestep * dFx;
	pCellState.w = pCellState.w + dLclTimestep * dFy;

	return pCellState;
}

/*
 *  Adjust the discharge with regard to friction
 */
__kernel  REQD_WG_SIZE_FULL_TS
void per_Friction(
		__constant cl_double *		dTimestep,
		__global cl_double4 *  	pCellData,
		__global cl_double const * restrict  	dBedData,
		__global cl_double const * restrict  	dManningData
	)
{
	__private cl_double		dLclTimestep	= *dTimestep;
	__private cl_long		lIdxX			= get_global_id(0);
	__private cl_long		lIdxY			= get_global_id(1);

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX >= DOMAIN_COLS - 1 || lIdxY >= DOMAIN_ROWS - 1 || lIdxX == 0 || lIdxY == 0 )
		return;

	// Also don't bother if we've gone beyond the total simulation time
	if ( dLclTimestep <= 0.0 )
		return;

	__private cl_ulong ulIdx				= getCellID(lIdxX, lIdxY);
	__private cl_double4 pCellState			= pCellData[ ulIdx ];
	__private cl_double dBedElevation		= dBedData[ ulIdx ];
	__private cl_double	dDepth				= pCellState.x - dBedElevation;

	// Low depth: don't bother
	if ( dDepth < VERY_SMALL )
		return;

	__private cl_double dManningCoefficient	= dManningData[ ulIdx ];

	pCellState = implicitFriction(
		pCellState,
		dBedElevation,
		dDepth,
		dManningCoefficient,
		dLclTimestep
	);

	pCellData[ ulIdx ]	= pCellState;
}
