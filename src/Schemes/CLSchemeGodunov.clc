/*
 * ------------------------------------------
 *
 *  HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 *  Luke S. Smith and Qiuhua Liang
 *  luke@smith.ac
 *
 *  School of Civil Engineering & Geosciences
 *  Newcastle University
 *
 * ------------------------------------------
 *  This code is licensed under GPLv3. See LICENCE
 *  for more information.
 * ------------------------------------------
 *  GODUNOV-TYPE SCHEME
 * ------------------------------------------
 *  Implementation of the 1st order accurate
 *  Godunov-type scheme
 * ------------------------------------------
 *
 */


/*
 *  Reconstruct the cell data in a non-negative way (depth positivity preserving)
 */
cl_uchar reconstructInterface(
	cl_double4		pStateLeft,						// Left current state		Z, Zmax, Qx, Qy
	cl_double		dBedLeft,						// Left bed elevation
	cl_double4		pStateRight,					// Right current state
	cl_double		dBedRight,						// Right bed elevation
	cl_double8*		pOutputLeft,					// Output data for LHS of Riemann
	cl_double8*		pOutputRight,					// Output data for RHS of Riemann
	cl_uchar		ucDirection						// Direction under consideration
	)
{
	cl_uchar		ucStop = 0;
	cl_double8		pReconstructionLeft, pReconstructionRight;
	cl_double		dDepthL = pStateLeft.x - dBedLeft;
	cl_double		dDepthR = pStateRight.x - dBedRight;

	// Initial values before reconstruction
#ifdef USE_ALTERNATE_CONSTRUCTS
	pReconstructionLeft = (cl_double8)
		{pStateLeft.S0,																		// Z	S0
		dDepthL,																			// H	S1
		pStateLeft.S2,																		// Qx	S2
		pStateLeft.S3,																		// Qy	S3
		(dDepthL < VERY_SMALL ? 0.0 : pStateLeft.S2 / dDepthL),							// U	S4
		(dDepthL < VERY_SMALL ? 0.0 : pStateLeft.S3 / dDepthL),							// V	S5
		dBedLeft,																			// Zb	S6
		0.0};																				//		S7
	pReconstructionRight = (cl_double8)
		{pStateRight.S0,																	// Z	S0
		dDepthR,																			// H	S1
		pStateRight.S2,																	// Qx	S2
		pStateRight.S3,																	// Qy	S3
		(dDepthR < VERY_SMALL ? 0.0 : pStateRight.S2 / dDepthR),							// U	S4
		(dDepthR < VERY_SMALL ? 0.0 : pStateRight.S3 / dDepthR),							// V	S5
		dBedRight,																			// Zb	S6
		0.0};																				//		S7
#else
	pReconstructionLeft = (cl_double8)
		(pStateLeft.S0,																		// Z	S0
		dDepthL,																			// H	S1
		pStateLeft.S2,																		// Qx	S2
		pStateLeft.S3,																		// Qy	S3
		(dDepthL < VERY_SMALL ? 0.0 : pStateLeft.S2 / dDepthL),							// U	S4
		(dDepthL < VERY_SMALL ? 0.0 : pStateLeft.S3 / dDepthL),							// V	S5
		dBedLeft,																			// Zb	S6
		0.0);																				//		S7
	pReconstructionRight = (cl_double8)
		(pStateRight.S0,																	// Z	S0
		dDepthR,																			// H	S1
		pStateRight.S2,																	// Qx	S2
		pStateRight.S3,																	// Qy	S3
		(dDepthR < VERY_SMALL ? 0.0 : pStateRight.S2 / dDepthR),							// U	S4
		(dDepthR < VERY_SMALL ? 0.0 : pStateRight.S3 / dDepthR),							// V	S5
		dBedRight,																			// Zb	S6
		0.0);																				//		S7
#endif

	// Maximum bed elevation and vertical shift factor
	cl_double	dBedMaximum = (pReconstructionLeft.S6 > pReconstructionRight.S6 ? pReconstructionLeft.S6 : pReconstructionRight.S6);
	cl_double	dShiftV = dBedMaximum - (ucDirection < DOMAIN_DIR_S ? pStateLeft : pStateRight).S0;

	//if (dShiftV < 0.0) dShiftV = 0.0;
	dShiftV = fmax(dShiftV,0.0);

	// Adjustment of depths and dependent elements
//	pReconstructionLeft.S1 = (pStateLeft.S0 - dBedMaximum > 0.0 ? (pStateLeft.S0 - dBedMaximum) : 0.0);
	pReconstructionLeft.S1 = fmax(pStateLeft.S0 - dBedMaximum, 0.0);
	pReconstructionLeft.S0 = pReconstructionLeft.S1 + dBedMaximum;
	pReconstructionLeft.S2 = pReconstructionLeft.S1 * pReconstructionLeft.S4;
	pReconstructionLeft.S3 = pReconstructionLeft.S1 * pReconstructionLeft.S5;

//	pReconstructionRight.S1 = (pStateRight.S0 - dBedMaximum > 0.0 ? (pStateRight.S0 - dBedMaximum) : 0.0);
	pReconstructionRight.S1 = fmax(pStateRight.S0 - dBedMaximum, 0.0);
	pReconstructionRight.S0 = pReconstructionRight.S1 + dBedMaximum;
	pReconstructionRight.S2 = pReconstructionRight.S1 * pReconstructionRight.S4;
	pReconstructionRight.S3 = pReconstructionRight.S1 * pReconstructionRight.S5;

	// Prevent draining from a dry cell
	// and the stopping conditions
	switch (ucDirection)
	{
	case DOMAIN_DIR_N:

		// NOTE: Do NOT include zero velocity in the check. Velocity must be non-negative for stopping conditions
		//		 to be required.
		if (pReconstructionLeft.S1 <= VERY_SMALL && pStateLeft.w > 0.0) { ucStop++; }
		if (pReconstructionRight.S1 <= VERY_SMALL && pReconstructionLeft.S5 < 0.0)  { ucStop++; pReconstructionLeft.S5 = 0.0; }
		if (pReconstructionLeft.S1 <= VERY_SMALL && pReconstructionRight.S5 > 0.0) { ucStop++; pReconstructionRight.S5 = 0.0; }

		break;
	case DOMAIN_DIR_S:

		if (pReconstructionRight.S1 <= VERY_SMALL && pStateRight.w < 0.0) { ucStop++; }
		if (pReconstructionRight.S1 <= VERY_SMALL && pReconstructionLeft.S5 < 0.0)  { ucStop++; pReconstructionLeft.S5 = 0.0; }
		if (pReconstructionLeft.S1 <= VERY_SMALL  && pReconstructionRight.S5 > 0.0) { ucStop++; pReconstructionRight.S5 = 0.0; }

		break;
	case DOMAIN_DIR_E:

		if (pReconstructionLeft.S1 <= VERY_SMALL  && pStateLeft.z > 0.0) { ucStop++; }
		if (pReconstructionRight.S1 <= VERY_SMALL && pReconstructionLeft.S4 < 0.0)  { ucStop++; pReconstructionLeft.S4 = 0.0; }
		if (pReconstructionLeft.S1 <= VERY_SMALL  && pReconstructionRight.S4 > 0.0) { ucStop++; pReconstructionRight.S4 = 0.0; }

		break;
	case DOMAIN_DIR_W:

		if (pReconstructionRight.S1 <= VERY_SMALL && pStateRight.z < 0.0) { ucStop++; }
		if (pReconstructionRight.S1 <= VERY_SMALL && pReconstructionLeft.S4 < 0.0)  { ucStop++; pReconstructionLeft.S4 = 0.0; }
		if (pReconstructionLeft.S1 <= VERY_SMALL  && pReconstructionRight.S4 > 0.0) { ucStop++; pReconstructionRight.S4 = 0.0; }

		break;
	}

	// Local modification of the bed level (and consequently, FSL to maintain depth)
	pReconstructionLeft.S6 = dBedMaximum - dShiftV;
	pReconstructionRight.S6 = dBedMaximum - dShiftV;
	pReconstructionLeft.S0 -= dShiftV;
	pReconstructionRight.S0 -= dShiftV;

	// Stopping conditions
	/*/
	if (   pReconstructionLeft.S1 < VERY_SMALL &&
	( ( ucDirection == DOMAIN_DIR_N && pStateLeft.w > 0.0 ) ||
	( ucDirection == DOMAIN_DIR_E && pStateLeft.z > 0.0 ) ) )
	ucStop++;
	if (   pReconstructionRight.S1 < VERY_SMALL &&
	( ( ucDirection == DOMAIN_DIR_S && pStateRight.w < 0.0 ) ||
	( ucDirection == DOMAIN_DIR_W && pStateRight.z < 0.0 ) ) )
	ucStop++;
	*/

	// Output vector: Z, H, Qx, Qy, U, V, Zb
	*pOutputLeft = pReconstructionLeft;
	*pOutputRight = pReconstructionRight;

	// Stop flow?
	return ucStop;
}

/*
 *  Calculate everything without using LDS caching
 */
__kernel REQD_WG_SIZE_FULL_TS
void gts_cacheDisabled (
			__constant	cl_double *  			dTimestep,					// Timestep
			__global	cl_double const * restrict	dBedElevation,					// Bed elevation
			__global	cl_double4 *  			pCellStateSrc,					// Current cell state data
			__global	cl_double4 *  			pCellStateDst,					// Current cell state data
			__global	cl_double const * restrict	dManning					// Manning values
		)
{

	// Identify the cell we're reconstructing (no overlap)
	__private cl_long					lIdxX			= get_global_id(0);
	__private cl_long					lIdxY			= get_global_id(1);
	__private cl_ulong					ulIdx, ulIdxNeig;
	__private cl_uchar					ucDirection;

	ulIdx = getCellID(lIdxX, lIdxY);

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX >= DOMAIN_COLS - 1 ||
		 lIdxY >= DOMAIN_ROWS - 1 ||
		 lIdxX <= 0 ||
		 lIdxY <= 0 )
		return;

	__private cl_double	dLclTimestep	= *dTimestep;
	__private cl_double	dManningCoef;
	__private cl_double	dCellBedElev,dNeigBedElevN,dNeigBedElevE,dNeigBedElevS,dNeigBedElevW;
	__private cl_double4	pCellData,pNeigDataN,pNeigDataE,pNeigDataS,pNeigDataW;	// Z, Zmax, Qx, Qy
	__private cl_double4	pSourceTerms,		dDeltaValues;			// Z, Qx, Qy
	__private cl_double4	pFlux[4];						// Z, Qx, Qy
	__private cl_double8	pLeft,			pRight;				// Z, H, Qx, Qy, U, V, Zb
	__private cl_uchar	ucStop			= 0;
	__private cl_uchar	ucDryCount		= 0;


	// Also don't bother if we've gone beyond the total simulation time
	if (dLclTimestep <= 0.0)
	{
		// TODO: Is there a way of avoiding this?!
		pCellStateDst[ulIdx] = pCellStateSrc[ulIdx];
		return;
	}

	// Load cell data
	dCellBedElev		= dBedElevation[ ulIdx ];
	pCellData			= pCellStateSrc[ ulIdx ];
	dManningCoef		= dManning[ ulIdx ];

	// Cell disabled?
	if ( pCellData.y <= -9999.0 || pCellData.x == -9999.0 )
	{
		pCellStateDst[ ulIdx ] = pCellData;
		return;
	}

	ucDirection = DOMAIN_DIR_W;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevW	= dBedElevation [ ulIdxNeig ];
	pNeigDataW		= pCellStateSrc	[ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_S;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevS	= dBedElevation [ ulIdxNeig ];
	pNeigDataS		= pCellStateSrc	[ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_N;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevN	= dBedElevation [ ulIdxNeig ];
	pNeigDataN		= pCellStateSrc	[ ulIdxNeig ];
	ucDirection = DOMAIN_DIR_E;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevE	= dBedElevation [ ulIdxNeig ];
	pNeigDataE		= pCellStateSrc	[ ulIdxNeig ];

	#ifdef DEBUG_OUTPUT
	if ( lIdxX == DEBUG_CELLX && lIdxY == DEBUG_CELLY )
	{
		printf( "Current data:  { %f, %f, %f, %f )\n", pCellData.x, pCellData.y, pCellData.z, pCellData.w );
		printf( "Neighbour N:   { %f, %f, %f, %f )\n", pNeigDataN.x, dNeigBedElevN, pNeigDataN.z, pNeigDataN.w );
		printf( "Neighbour E:   { %f, %f, %f, %f )\n", pNeigDataE.x, dNeigBedElevE, pNeigDataE.z, pNeigDataE.w );
		printf( "Neighbour S:   { %f, %f, %f, %f )\n", pNeigDataS.x, dNeigBedElevS, pNeigDataS.z, pNeigDataS.w );
		printf( "Neighbour W:   { %f, %f, %f, %f )\n", pNeigDataW.x, dNeigBedElevW, pNeigDataW.z, pNeigDataW.w );
	}
	#endif

	if ( pCellData.x  - dCellBedElev  < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataN.x - dNeigBedElevN < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataE.x - dNeigBedElevE < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataS.x - dNeigBedElevS < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataW.x - dNeigBedElevW < VERY_SMALL ) ucDryCount++;

	// All neighbours are dry? Don't bother calculating
	if ( ucDryCount >= 5 ) return;

	// Reconstruct interfaces
	// -> North
	ucStop += reconstructInterface(
		pCellData,							// Left cell data
		dCellBedElev,						// Left bed elevation
		pNeigDataN,							// Right cell data
		dNeigBedElevN,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_N
	);
	pNeigDataN.x  = pRight.S0;
	dNeigBedElevN = pRight.S6;
	#ifdef DEBUG_OUTPUT
	if ( lIdxX == DEBUG_CELLX && lIdxY == DEBUG_CELLY )
	{
		printf( "Reconstruct NL:{ %f, %f, %f, %f )\n", pLeft.S0, pLeft.S6, pLeft.S2, pLeft.S3 );
		printf( "Reconstruct NR:{ %f, %f, %f, %f )\n", pRight.S0, pRight.S6, pRight.S2, pRight.S3 );
	}
	#endif
	pFlux[DOMAIN_DIR_N] = riemannSolver( DOMAIN_DIR_N, pLeft, pRight, false );

	// -> South
	ucStop += reconstructInterface(
		pNeigDataS,							// Left cell data
		dNeigBedElevS,						// Left bed elevation
		pCellData,							// Right cell data
		dCellBedElev,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_S
	);
	pNeigDataS.x  = pLeft.S0;
	dNeigBedElevS = pLeft.S6;
	pFlux[DOMAIN_DIR_S] = riemannSolver( DOMAIN_DIR_S, pLeft, pRight, false );

	// -> East
	ucStop += reconstructInterface(
		pCellData,							// Left cell data
		dCellBedElev,						// Left bed elevation
		pNeigDataE,							// Right cell data
		dNeigBedElevE,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_E
	);
	pNeigDataE.x  = pRight.S0;
	dNeigBedElevE = pRight.S6;
	pFlux[DOMAIN_DIR_E] = riemannSolver( DOMAIN_DIR_E, pLeft, pRight, false );

	// -> West
	ucStop += reconstructInterface(
		pNeigDataW,							// Left cell data
		dNeigBedElevW,						// Left bed elevation
		pCellData,							// Right cell data
		dCellBedElev,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_W
	);
	pNeigDataW.x  = pLeft.S0;
	dNeigBedElevW = pLeft.S6;
	pFlux[DOMAIN_DIR_W] = riemannSolver( DOMAIN_DIR_W, pLeft, pRight, false );

	// Source term vector
	// TODO: Somehow get these sorted too...
	pSourceTerms.x = 0.0;
	pSourceTerms.y = -1 * GRAVITY * ( ( pNeigDataE.x + pNeigDataW.x ) * 0.5 ) * ( ( dNeigBedElevE - dNeigBedElevW ) * DOMAIN_DELTAX_R );
	pSourceTerms.z = -1 * GRAVITY * ( ( pNeigDataN.x + pNeigDataS.x ) * 0.5 ) * ( ( dNeigBedElevN - dNeigBedElevS ) * DOMAIN_DELTAY_R );

	// Calculation of change values per timestep and spatial dimension
	/*
	dDeltaValues.x	= ( pFlux[1].x  - pFlux[3].x  )* DOMAIN_DELTAX_R +
					  ( pFlux[0].x  - pFlux[2].x  )* DOMAIN_DELTAY_R -
					  pSourceTerms.x;
	dDeltaValues.z	= ( pFlux[1].y - pFlux[3].y )* DOMAIN_DELTAX_R +
					  ( pFlux[0].y - pFlux[2].y )* DOMAIN_DELTAY_R -
					  pSourceTerms.y;
	dDeltaValues.w	= ( pFlux[1].z - pFlux[3].z )* DOMAIN_DELTAX_R +
					  ( pFlux[0].z - pFlux[2].z )* DOMAIN_DELTAY_R -
					  pSourceTerms.z;
	*/

	dDeltaValues.xzw = (pFlux[1].xyz - pFlux[3].xyz) * DOMAIN_DELTAX_R + (pFlux[0].xyz - pFlux[2].xyz) * DOMAIN_DELTAY_R - pSourceTerms.xyz;

	// Round delta values to zero if small
	// TODO: Explore whether this can be rewritten as some form of clamp operation?
	//       hm, don't think so - but maybe some fabs()?
	/*
	if ( ( dDeltaValues.x > 0.0 && dDeltaValues.x <  VERY_SMALL ) ||
		 ( dDeltaValues.x < 0.0 && dDeltaValues.x > -VERY_SMALL ) )
		 dDeltaValues.x = 0.0;
	if ( ( dDeltaValues.z > 0.0 && dDeltaValues.z <  VERY_SMALL ) ||
		 ( dDeltaValues.z < 0.0 && dDeltaValues.z > -VERY_SMALL ) )
		 dDeltaValues.z = 0.0;
	if ( ( dDeltaValues.w > 0.0 && dDeltaValues.w <  VERY_SMALL ) ||
		 ( dDeltaValues.w < 0.0 && dDeltaValues.w > -VERY_SMALL ) )
		 dDeltaValues.w = 0.0;
	*/
	if(fabs(dDeltaValues.x) < VERY_SMALL) dDeltaValues.x = 0.0;
	if(fabs(dDeltaValues.z) < VERY_SMALL) dDeltaValues.z = 0.0;
	if(fabs(dDeltaValues.w) < VERY_SMALL) dDeltaValues.w = 0.0;

	// Stopping conditions
	if ( ucStop > 0 )
	{
		pCellData.z = 0.0;
		pCellData.w = 0.0;
	}

	// Update the flow state
	// TODO: use mad() here? reduced precision noticable? should alreay produce fma
	// pCellData.x		= pCellData.x	- dLclTimestep * dDeltaValues.x;
	// pCellData.z		= pCellData.z	- dLclTimestep * dDeltaValues.z;
	// pCellData.w		= pCellData.w	- dLclTimestep * dDeltaValues.w;
	pCellData.xzw = pCellData.xzw - dDeltaValues.xzw * dLclTimestep;


	#ifdef FRICTION_ENABLED
	#ifdef FRICTION_IN_FLUX_KERNEL
	// Calculate the friction effects
	pCellData = implicitFriction(
		pCellData,
		dCellBedElev,
		dManningCoef,
		dLclTimestep
	);
	#endif
	#endif

	// New max FSL?
	if ( pCellData.x > pCellData.y && pCellData.y > -9990.0 )
		pCellData.y = pCellData.x;

	// Crazy low depths?
	if ( pCellData.x - dCellBedElev < VERY_SMALL )
		pCellData.x = dCellBedElev;

	// Commit to global memory
	pCellStateDst[ ulIdx ] = pCellData;
}

/*
 *  Calculate everything by also using LDS caching
 */
__kernel REQD_WG_SIZE_FULL_TS
void gts_cacheEnabled (
			__constant	cl_double *  				dTimestep,						// Timestep
			__global	cl_double const * restrict	dBedElevation,					// Bed elevation
			__global	cl_double4 *  			pCellStateSrc,					// Current cell state data
			__global	cl_double4 *  			pCellStateDst,					// Current cell state data
			__global	cl_double const * restrict	dManning						// Manning values
		)
{
	__local   cl_double4				lpCellState[ GTS_DIM1 ][ GTS_DIM2 ];			// Current cell state data (cache)

	// Identify the cell we're reconstructing (no overlap)
	__private cl_double					dLclTimestep;
	__private cl_long					lIdxX			= get_global_id(0) - get_group_id(0) * 2;
	__private cl_long					lIdxY			= get_global_id(1) - get_group_id(1) * 2;
	__private cl_long					lLocalX			= get_local_id(0);
	__private cl_long					lLocalY			= get_local_id(1);
	__private cl_ulong					lLocalSizeX		= get_local_size(0);
	__private cl_ulong					lLocalSizeY		= get_local_size(1);
	__private cl_double4				pCellData;
	__private cl_double					dManningCoef;
	__private cl_double					dCellBedElev;
	__private cl_ulong					ulIdx;
	__private cl_uchar					ucDirection;

	if ( lIdxX > DOMAIN_COLS - 1 ||
		 lIdxY > DOMAIN_ROWS - 1 ||
		 lIdxX < 0 ||
		 lIdxY < 0 )
	{
		// Ideally we'd just exit the function here, but then we wont reach the barrier
		lIdxX = max((long)0,min((long)(DOMAIN_COLS - 1),lIdxX));
		lIdxY = max((long)0,min((long)(DOMAIN_ROWS - 1),lIdxY));
	}

	ulIdx = getCellID(lIdxX, lIdxY);

	// The max FSL is substituted with the bed elevation, thereby reducing LDS consumption
	dLclTimestep							= *dTimestep;
	pCellData								= pCellStateSrc[ ulIdx ];
	dCellBedElev							= dBedElevation[ ulIdx ];
	dManningCoef							= dManning[ ulIdx ];
	lpCellState[ lLocalX ][ lLocalY ]		= pCellData;
	lpCellState[ lLocalX ][ lLocalY ].y		= dCellBedElev;

	#ifdef DEBUG_OUTPUT
	if ( lIdxX == DEBUG_CELLX && lIdxY == DEBUG_CELLY )
	{
		printf( "Work-item indices: { %u, %u )\n", get_global_id(0), get_global_id(1) );
		printf( "Cell index X:      { %u )\n", lIdxX );
		printf( "Cell index Y:      { %u )\n", lIdxY );
		printf( "WG index X:        { %u )\n", lLocalX );
		printf( "WG index Y:        { %u )\n", lLocalY );
		printf( "Linearised index:  { %u )\n", ulIdx );
		printf( "Local mem commit:  { %f, %f, %f, %f )\n", pCellData.x, dCellBedElev, pCellData.z, pCellData.w );
	}
	#endif

	barrier( CLK_LOCAL_MEM_FENCE );

	// Cell disabled?
	if ( pCellData.y <= -9999.0 || pCellData.x == -9999.0 )
	{
		pCellStateDst[ ulIdx ] = pCellData;
		return;
	}

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX >= DOMAIN_COLS - 1 ||
		 lIdxY >= DOMAIN_ROWS - 1 ||
		 lIdxX <= 0 ||
		 lIdxY <= 0 ||
		 lLocalX >= lLocalSizeX - 1 ||
		 lLocalY >= lLocalSizeY - 1 ||
		 lLocalX <= 0 ||
		 lLocalY <= 0 )
		return;

	__private cl_double		dNeigBedElevN,dNeigBedElevE,dNeigBedElevS,dNeigBedElevW;
	__private cl_double4	pNeigDataN,pNeigDataE,pNeigDataS,pNeigDataW;							// Z, Zb, Qx, Qy
	__private cl_double4	pSourceTerms, dDeltaValues;												// Z, Qx, Qy
	__private cl_double4	pFlux[4];																// Z, Qx, Qy
	__private cl_double8	pLeft,				pRight;												// Z, H, Qx, Qy, U, V, Zb
	__private cl_uchar		ucStop			= 0;
	__private cl_uchar		ucDryCount		= 0;


	// Also don't bother if we've gone beyond the total simulation time
	if ( dLclTimestep <= 0.0 )
		return;

	pNeigDataW		= lpCellState[ lLocalX - 1 ][ lLocalY ];
	pNeigDataS		= lpCellState[ lLocalX ][ lLocalY - 1 ];
	pNeigDataE		= lpCellState[ lLocalX + 1 ][ lLocalY ];
	pNeigDataN		= lpCellState[ lLocalX ][ lLocalY + 1 ];
	dNeigBedElevW	= pNeigDataW.y;
	dNeigBedElevS	= pNeigDataS.y;
	dNeigBedElevE	= pNeigDataE.y;
	dNeigBedElevN	= pNeigDataN.y;

	#ifdef DEBUG_OUTPUT
	if ( lIdxX == DEBUG_CELLX && lIdxY == DEBUG_CELLY )
	{
		printf( "Current data:  { %f, %f, %f, %f )\n", pCellData.x, pCellData.y, pCellData.z, pCellData.w );
		printf( "Neighbour N:   { %f, %f, %f, %f )\n", pNeigDataN.x, pNeigDataN.y, pNeigDataN.z, pNeigDataN.w );
		printf( "Neighbour E:   { %f, %f, %f, %f )\n", pNeigDataE.x, pNeigDataE.y, pNeigDataE.z, pNeigDataE.w );
		printf( "Neighbour S:   { %f, %f, %f, %f )\n", pNeigDataS.x, pNeigDataS.y, pNeigDataS.z, pNeigDataS.w );
		printf( "Neighbour W:   { %f, %f, %f, %f )\n", pNeigDataW.x, pNeigDataW.y, pNeigDataW.z, pNeigDataW.w );
	}
	#endif

	if ( pCellData.x  - dCellBedElev  < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataN.x - dNeigBedElevN < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataE.x - dNeigBedElevE < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataS.x - dNeigBedElevS < VERY_SMALL ) ucDryCount++;
	if ( pNeigDataW.x - dNeigBedElevW < VERY_SMALL ) ucDryCount++;

	// All neighbours are dry? Don't bother calculating
	if ( ucDryCount >= 5 ) return;

	// Reconstruct interfaces
	// -> North
	ucStop += reconstructInterface(
		pCellData,							// Left cell data
		dCellBedElev,						// Left bed elevation
		pNeigDataN,							// Right cell data
		dNeigBedElevN,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_N
	);
	pNeigDataN.x  = pRight.S0;
	dNeigBedElevN = pRight.S6;
	pFlux[DOMAIN_DIR_N] = riemannSolver( DOMAIN_DIR_N, pLeft, pRight, false );

	// -> South
	ucStop += reconstructInterface(
		pNeigDataS,							// Left cell data
		dNeigBedElevS,						// Left bed elevation
		pCellData,							// Right cell data
		dCellBedElev,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_S
	);
	pNeigDataS.x  = pLeft.S0;
	dNeigBedElevS = pLeft.S6;
	pFlux[DOMAIN_DIR_S] = riemannSolver( DOMAIN_DIR_S, pLeft, pRight, false );

	// -> East
	ucStop += reconstructInterface(
		pCellData,							// Left cell data
		dCellBedElev,						// Left bed elevation
		pNeigDataE,							// Right cell data
		dNeigBedElevE,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_E
	);
	pNeigDataE.x  = pRight.S0;
	dNeigBedElevE = pRight.S6;
	pFlux[DOMAIN_DIR_E] = riemannSolver( DOMAIN_DIR_E, pLeft, pRight, false );

	// -> West
	ucStop += reconstructInterface(
		pNeigDataW,							// Left cell data
		dNeigBedElevW,						// Left bed elevation
		pCellData,							// Right cell data
		dCellBedElev,						// Right bed elevation
		&pLeft,								// Output for left
		&pRight,							// Output for right
		DOMAIN_DIR_W
	);
	pNeigDataW.x  = pLeft.S0;
	dNeigBedElevW = pLeft.S6;
	pFlux[DOMAIN_DIR_W] = riemannSolver( DOMAIN_DIR_W, pLeft, pRight, false );

	// Source term vector
	// TODO: Somehow get these sorted too...
	pSourceTerms.x = 0.0;
	pSourceTerms.y = -1 * GRAVITY * ( ( pNeigDataE.x + pNeigDataW.x ) * 0.5 ) * ( ( dNeigBedElevE - dNeigBedElevW ) * DOMAIN_DELTAX_R );
	pSourceTerms.z = -1 * GRAVITY * ( ( pNeigDataN.x + pNeigDataS.x ) * 0.5 ) * ( ( dNeigBedElevN - dNeigBedElevS ) * DOMAIN_DELTAY_R );

	// Calculation of change values per timestep and spatial dimension
	dDeltaValues.x	= ( pFlux[1].x  - pFlux[3].x  ) * DOMAIN_DELTAX_R +
					  ( pFlux[0].x  - pFlux[2].x  ) * DOMAIN_DELTAY_R -
					  pSourceTerms.x;
	dDeltaValues.z	= ( pFlux[1].y - pFlux[3].y ) * DOMAIN_DELTAX_R +
					  ( pFlux[0].y - pFlux[2].y ) * DOMAIN_DELTAY_R -
					  pSourceTerms.y;
	dDeltaValues.w	= ( pFlux[1].z - pFlux[3].z )* DOMAIN_DELTAX_R +
					  ( pFlux[0].z - pFlux[2].z ) * DOMAIN_DELTAY_R -
					  pSourceTerms.z;

	// Round delta values to zero if small
	// TODO: Explore whether this can be rewritten as some form of clamp operation?
	if ( ( dDeltaValues.x > 0.0 && dDeltaValues.x <  VERY_SMALL ) ||
		 ( dDeltaValues.x < 0.0 && dDeltaValues.x > -VERY_SMALL ) )
		 dDeltaValues.x = 0.0;
	if ( ( dDeltaValues.z > 0.0 && dDeltaValues.z <  VERY_SMALL ) ||
		 ( dDeltaValues.z < 0.0 && dDeltaValues.z > -VERY_SMALL ) )
		 dDeltaValues.z = 0.0;
	if ( ( dDeltaValues.w > 0.0 && dDeltaValues.w <  VERY_SMALL ) ||
		 ( dDeltaValues.w < 0.0 && dDeltaValues.w > -VERY_SMALL ) )
		 dDeltaValues.w = 0.0;

	// Stopping conditions
	if ( ucStop > 0 )
	{
		pCellData.z = 0.0;
		pCellData.w = 0.0;
	}

	// Update the flow state
	pCellData.x		= pCellData.x	- dLclTimestep * dDeltaValues.x;
	pCellData.z		= pCellData.z	- dLclTimestep * dDeltaValues.z;
	pCellData.w		= pCellData.w	- dLclTimestep * dDeltaValues.w;

	#ifdef FRICTION_ENABLED
	#ifdef FRICTION_IN_FLUX_KERNEL
	// Calculate the friction effects
	pCellData = implicitFriction(
		pCellData,
		dCellBedElev,
		dManningCoef,
		dLclTimestep
	);
	#endif
	#endif

	// New max FSL?
	if ( pCellData.x > pCellData.y && pCellData.y > -9990.0 )
		pCellData.y = pCellData.x;

	// Crazy low depths?
	if ( pCellData.x - dCellBedElev < VERY_SMALL )
		pCellData.x = dCellBedElev;

	#ifdef DEBUG_OUTPUT
	if ( lIdxX == DEBUG_CELLX && lIdxY == DEBUG_CELLY )
	{
		printf( "Timestep:      { %f )\n", dLclTimestep );
		printf( "Reconstruct N: { %f, %f, %f, %f )\n", pNeigDataN.x, dNeigBedElevN, pNeigDataN.z, pNeigDataN.w );
		printf( "Reconstruct E: { %f, %f, %f, %f )\n", pNeigDataE.x, dNeigBedElevE, pNeigDataE.z, pNeigDataE.w );
		printf( "Reconstruct S: { %f, %f, %f, %f )\n", pNeigDataS.x, dNeigBedElevS, pNeigDataS.z, pNeigDataS.w );
		printf( "Reconstruct W: { %f, %f, %f, %f )\n", pNeigDataW.x, dNeigBedElevW, pNeigDataW.z, pNeigDataW.w );
		printf( "Delta terms:   { %f, %f, %f )\n", dDeltaValues.x, dDeltaValues.z, dDeltaValues.w );
		printf( "Source terms:  { %f, %f, %f )\n", pSourceTerms.x, pSourceTerms.y, pSourceTerms.z );
		printf( "New data:      { %f, %f, %f, %f )\n", pCellData.x, pCellData.y, pCellData.z, pCellData.w );
	}
	#endif

	// Commit to global memory
	pCellStateDst[ ulIdx ] = pCellData;
}
